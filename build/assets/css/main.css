/* ==========================================================================
   Main Scss File: Importing all other files
   ========================================================================== */
/**
 * Foundation for Sites by ZURB
 * Version 6.1.2
 * foundation.zurb.com
 * Licensed under MIT Open Source
 */
@import url("https://fonts.googleapis.com/css?family=Istok+Web:400,400italic,700,700italic");
@import url("https://fonts.googleapis.com/css?family=Lora:400,400italic,700,700italic");
.row {
  max-width: 75rem;
  margin-left: auto;
  margin-right: auto;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: row wrap;
      -ms-flex-flow: row wrap;
          flex-flow: row wrap; }
  @media screen and (min-width: 25em) {
    .row .row {
      margin-left: -0.625rem;
      margin-right: -0.625rem; } }
  @media screen and (min-width: 40em) {
    .row .row {
      margin-left: -0.9375rem;
      margin-right: -0.9375rem; } }
  .row.expanded {
    max-width: none; }
  .row.collapse > .column, .row.collapse > .columns {
    padding-left: 0;
    padding-right: 0; }

.column, .columns {
  -webkit-flex: 1 1 0px;
      -ms-flex: 1 1 0px;
          flex: 1 1 0px; }
  @media screen and (min-width: 25em) {
    .column, .columns {
      padding-left: 0.625rem;
      padding-right: 0.625rem; } }
  @media screen and (min-width: 40em) {
    .column, .columns {
      padding-left: 0.9375rem;
      padding-right: 0.9375rem; } }

.column.row.row, .row.row.columns {
  float: none; }
  .row .column.row.row, .row .row.row.columns {
    padding-left: 0;
    padding-right: 0;
    margin-left: 0;
    margin-right: 0; }

@media screen and (min-width: 25em) {
  .small-1 {
    -webkit-flex: 0 0 8.33333%;
        -ms-flex: 0 0 8.33333%;
            flex: 0 0 8.33333%;
    max-width: 8.33333%; }
  .small-offset-0 {
    margin-left: 0%; }
  .small-2 {
    -webkit-flex: 0 0 16.66667%;
        -ms-flex: 0 0 16.66667%;
            flex: 0 0 16.66667%;
    max-width: 16.66667%; }
  .small-offset-1 {
    margin-left: 8.33333%; }
  .small-3 {
    -webkit-flex: 0 0 25%;
        -ms-flex: 0 0 25%;
            flex: 0 0 25%;
    max-width: 25%; }
  .small-offset-2 {
    margin-left: 16.66667%; }
  .small-4 {
    -webkit-flex: 0 0 33.33333%;
        -ms-flex: 0 0 33.33333%;
            flex: 0 0 33.33333%;
    max-width: 33.33333%; }
  .small-offset-3 {
    margin-left: 25%; }
  .small-5 {
    -webkit-flex: 0 0 41.66667%;
        -ms-flex: 0 0 41.66667%;
            flex: 0 0 41.66667%;
    max-width: 41.66667%; }
  .small-offset-4 {
    margin-left: 33.33333%; }
  .small-6 {
    -webkit-flex: 0 0 50%;
        -ms-flex: 0 0 50%;
            flex: 0 0 50%;
    max-width: 50%; }
  .small-offset-5 {
    margin-left: 41.66667%; }
  .small-7 {
    -webkit-flex: 0 0 58.33333%;
        -ms-flex: 0 0 58.33333%;
            flex: 0 0 58.33333%;
    max-width: 58.33333%; }
  .small-offset-6 {
    margin-left: 50%; }
  .small-8 {
    -webkit-flex: 0 0 66.66667%;
        -ms-flex: 0 0 66.66667%;
            flex: 0 0 66.66667%;
    max-width: 66.66667%; }
  .small-offset-7 {
    margin-left: 58.33333%; }
  .small-9 {
    -webkit-flex: 0 0 75%;
        -ms-flex: 0 0 75%;
            flex: 0 0 75%;
    max-width: 75%; }
  .small-offset-8 {
    margin-left: 66.66667%; }
  .small-10 {
    -webkit-flex: 0 0 83.33333%;
        -ms-flex: 0 0 83.33333%;
            flex: 0 0 83.33333%;
    max-width: 83.33333%; }
  .small-offset-9 {
    margin-left: 75%; }
  .small-11 {
    -webkit-flex: 0 0 91.66667%;
        -ms-flex: 0 0 91.66667%;
            flex: 0 0 91.66667%;
    max-width: 91.66667%; }
  .small-offset-10 {
    margin-left: 83.33333%; }
  .small-12 {
    -webkit-flex: 0 0 100%;
        -ms-flex: 0 0 100%;
            flex: 0 0 100%;
    max-width: 100%; }
  .small-offset-11 {
    margin-left: 91.66667%; }
  .small-order-1 {
    -webkit-order: 1;
        -ms-flex-order: 1;
            order: 1; }
  .small-order-2 {
    -webkit-order: 2;
        -ms-flex-order: 2;
            order: 2; }
  .small-order-3 {
    -webkit-order: 3;
        -ms-flex-order: 3;
            order: 3; }
  .small-order-4 {
    -webkit-order: 4;
        -ms-flex-order: 4;
            order: 4; }
  .small-order-5 {
    -webkit-order: 5;
        -ms-flex-order: 5;
            order: 5; }
  .small-order-6 {
    -webkit-order: 6;
        -ms-flex-order: 6;
            order: 6; }
  .small-collapse > .column, .small-collapse > .columns {
    padding-left: 0;
    padding-right: 0; }
  .small-uncollapse > .column, .small-uncollapse > .columns {
    padding-left: 0.625rem;
    padding-right: 0.625rem; } }

@media screen and (min-width: 40em) {
  .medium-1 {
    -webkit-flex: 0 0 8.33333%;
        -ms-flex: 0 0 8.33333%;
            flex: 0 0 8.33333%;
    max-width: 8.33333%; }
  .medium-offset-0 {
    margin-left: 0%; }
  .medium-2 {
    -webkit-flex: 0 0 16.66667%;
        -ms-flex: 0 0 16.66667%;
            flex: 0 0 16.66667%;
    max-width: 16.66667%; }
  .medium-offset-1 {
    margin-left: 8.33333%; }
  .medium-3 {
    -webkit-flex: 0 0 25%;
        -ms-flex: 0 0 25%;
            flex: 0 0 25%;
    max-width: 25%; }
  .medium-offset-2 {
    margin-left: 16.66667%; }
  .medium-4 {
    -webkit-flex: 0 0 33.33333%;
        -ms-flex: 0 0 33.33333%;
            flex: 0 0 33.33333%;
    max-width: 33.33333%; }
  .medium-offset-3 {
    margin-left: 25%; }
  .medium-5 {
    -webkit-flex: 0 0 41.66667%;
        -ms-flex: 0 0 41.66667%;
            flex: 0 0 41.66667%;
    max-width: 41.66667%; }
  .medium-offset-4 {
    margin-left: 33.33333%; }
  .medium-6 {
    -webkit-flex: 0 0 50%;
        -ms-flex: 0 0 50%;
            flex: 0 0 50%;
    max-width: 50%; }
  .medium-offset-5 {
    margin-left: 41.66667%; }
  .medium-7 {
    -webkit-flex: 0 0 58.33333%;
        -ms-flex: 0 0 58.33333%;
            flex: 0 0 58.33333%;
    max-width: 58.33333%; }
  .medium-offset-6 {
    margin-left: 50%; }
  .medium-8 {
    -webkit-flex: 0 0 66.66667%;
        -ms-flex: 0 0 66.66667%;
            flex: 0 0 66.66667%;
    max-width: 66.66667%; }
  .medium-offset-7 {
    margin-left: 58.33333%; }
  .medium-9 {
    -webkit-flex: 0 0 75%;
        -ms-flex: 0 0 75%;
            flex: 0 0 75%;
    max-width: 75%; }
  .medium-offset-8 {
    margin-left: 66.66667%; }
  .medium-10 {
    -webkit-flex: 0 0 83.33333%;
        -ms-flex: 0 0 83.33333%;
            flex: 0 0 83.33333%;
    max-width: 83.33333%; }
  .medium-offset-9 {
    margin-left: 75%; }
  .medium-11 {
    -webkit-flex: 0 0 91.66667%;
        -ms-flex: 0 0 91.66667%;
            flex: 0 0 91.66667%;
    max-width: 91.66667%; }
  .medium-offset-10 {
    margin-left: 83.33333%; }
  .medium-12 {
    -webkit-flex: 0 0 100%;
        -ms-flex: 0 0 100%;
            flex: 0 0 100%;
    max-width: 100%; }
  .medium-offset-11 {
    margin-left: 91.66667%; }
  .medium-order-1 {
    -webkit-order: 1;
        -ms-flex-order: 1;
            order: 1; }
  .medium-order-2 {
    -webkit-order: 2;
        -ms-flex-order: 2;
            order: 2; }
  .medium-order-3 {
    -webkit-order: 3;
        -ms-flex-order: 3;
            order: 3; }
  .medium-order-4 {
    -webkit-order: 4;
        -ms-flex-order: 4;
            order: 4; }
  .medium-order-5 {
    -webkit-order: 5;
        -ms-flex-order: 5;
            order: 5; }
  .medium-order-6 {
    -webkit-order: 6;
        -ms-flex-order: 6;
            order: 6; } }

@media screen and (min-width: 40em) and (min-width: 40em) {
  .medium-expand {
    -webkit-flex: 1 1 0px;
        -ms-flex: 1 1 0px;
            flex: 1 1 0px; } }

.row.medium-unstack .column, .row.medium-unstack .columns {
  -webkit-flex: 0 0 100%;
      -ms-flex: 0 0 100%;
          flex: 0 0 100%; }
  @media screen and (min-width: 40em) {
    .row.medium-unstack .column, .row.medium-unstack .columns {
      -webkit-flex: 1 1 0px;
          -ms-flex: 1 1 0px;
              flex: 1 1 0px; } }

@media screen and (min-width: 40em) {
  .medium-collapse > .column, .medium-collapse > .columns {
    padding-left: 0;
    padding-right: 0; }
  .medium-uncollapse > .column, .medium-uncollapse > .columns {
    padding-left: 0.9375rem;
    padding-right: 0.9375rem; } }

@media screen and (min-width: 64em) {
  .large-1 {
    -webkit-flex: 0 0 8.33333%;
        -ms-flex: 0 0 8.33333%;
            flex: 0 0 8.33333%;
    max-width: 8.33333%; }
  .large-offset-0 {
    margin-left: 0%; }
  .large-2 {
    -webkit-flex: 0 0 16.66667%;
        -ms-flex: 0 0 16.66667%;
            flex: 0 0 16.66667%;
    max-width: 16.66667%; }
  .large-offset-1 {
    margin-left: 8.33333%; }
  .large-3 {
    -webkit-flex: 0 0 25%;
        -ms-flex: 0 0 25%;
            flex: 0 0 25%;
    max-width: 25%; }
  .large-offset-2 {
    margin-left: 16.66667%; }
  .large-4 {
    -webkit-flex: 0 0 33.33333%;
        -ms-flex: 0 0 33.33333%;
            flex: 0 0 33.33333%;
    max-width: 33.33333%; }
  .large-offset-3 {
    margin-left: 25%; }
  .large-5 {
    -webkit-flex: 0 0 41.66667%;
        -ms-flex: 0 0 41.66667%;
            flex: 0 0 41.66667%;
    max-width: 41.66667%; }
  .large-offset-4 {
    margin-left: 33.33333%; }
  .large-6 {
    -webkit-flex: 0 0 50%;
        -ms-flex: 0 0 50%;
            flex: 0 0 50%;
    max-width: 50%; }
  .large-offset-5 {
    margin-left: 41.66667%; }
  .large-7 {
    -webkit-flex: 0 0 58.33333%;
        -ms-flex: 0 0 58.33333%;
            flex: 0 0 58.33333%;
    max-width: 58.33333%; }
  .large-offset-6 {
    margin-left: 50%; }
  .large-8 {
    -webkit-flex: 0 0 66.66667%;
        -ms-flex: 0 0 66.66667%;
            flex: 0 0 66.66667%;
    max-width: 66.66667%; }
  .large-offset-7 {
    margin-left: 58.33333%; }
  .large-9 {
    -webkit-flex: 0 0 75%;
        -ms-flex: 0 0 75%;
            flex: 0 0 75%;
    max-width: 75%; }
  .large-offset-8 {
    margin-left: 66.66667%; }
  .large-10 {
    -webkit-flex: 0 0 83.33333%;
        -ms-flex: 0 0 83.33333%;
            flex: 0 0 83.33333%;
    max-width: 83.33333%; }
  .large-offset-9 {
    margin-left: 75%; }
  .large-11 {
    -webkit-flex: 0 0 91.66667%;
        -ms-flex: 0 0 91.66667%;
            flex: 0 0 91.66667%;
    max-width: 91.66667%; }
  .large-offset-10 {
    margin-left: 83.33333%; }
  .large-12 {
    -webkit-flex: 0 0 100%;
        -ms-flex: 0 0 100%;
            flex: 0 0 100%;
    max-width: 100%; }
  .large-offset-11 {
    margin-left: 91.66667%; }
  .large-order-1 {
    -webkit-order: 1;
        -ms-flex-order: 1;
            order: 1; }
  .large-order-2 {
    -webkit-order: 2;
        -ms-flex-order: 2;
            order: 2; }
  .large-order-3 {
    -webkit-order: 3;
        -ms-flex-order: 3;
            order: 3; }
  .large-order-4 {
    -webkit-order: 4;
        -ms-flex-order: 4;
            order: 4; }
  .large-order-5 {
    -webkit-order: 5;
        -ms-flex-order: 5;
            order: 5; }
  .large-order-6 {
    -webkit-order: 6;
        -ms-flex-order: 6;
            order: 6; } }

@media screen and (min-width: 64em) and (min-width: 64em) {
  .large-expand {
    -webkit-flex: 1 1 0px;
        -ms-flex: 1 1 0px;
            flex: 1 1 0px; } }

.row.large-unstack .column, .row.large-unstack .columns {
  -webkit-flex: 0 0 100%;
      -ms-flex: 0 0 100%;
          flex: 0 0 100%; }
  @media screen and (min-width: 64em) {
    .row.large-unstack .column, .row.large-unstack .columns {
      -webkit-flex: 1 1 0px;
          -ms-flex: 1 1 0px;
              flex: 1 1 0px; } }

@media screen and (min-width: 64em) {
  .large-collapse > .column, .large-collapse > .columns {
    padding-left: 0;
    padding-right: 0; }
  .large-uncollapse > .column, .large-uncollapse > .columns {
    padding-left: 0.9375rem;
    padding-right: 0.9375rem; } }

.shrink {
  -webkit-flex: 0 0 auto;
      -ms-flex: 0 0 auto;
          flex: 0 0 auto;
  max-width: 100%; }

.row.align-right {
  -webkit-justify-content: flex-end;
      -ms-flex-pack: end;
          justify-content: flex-end; }

.row.align-center {
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center; }

.row.align-justify {
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between; }

.row.align-spaced {
  -webkit-justify-content: space-around;
      -ms-flex-pack: distribute;
          justify-content: space-around; }

.row.align-top {
  -webkit-align-items: flex-start;
      -ms-flex-align: start;
              -ms-grid-row-align: flex-start;
          align-items: flex-start; }

.column.align-top, .align-top.columns {
  -webkit-align-self: flex-start;
      -ms-flex-item-align: start;
          align-self: flex-start; }

.row.align-bottom {
  -webkit-align-items: flex-end;
      -ms-flex-align: end;
              -ms-grid-row-align: flex-end;
          align-items: flex-end; }

.column.align-bottom, .align-bottom.columns {
  -webkit-align-self: flex-end;
      -ms-flex-item-align: end;
          align-self: flex-end; }

.row.align-middle {
  -webkit-align-items: center;
      -ms-flex-align: center;
              -ms-grid-row-align: center;
          align-items: center; }

.column.align-middle, .align-middle.columns {
  -webkit-align-self: center;
      -ms-flex-item-align: center;
          align-self: center; }

.row.align-stretch {
  -webkit-align-items: stretch;
      -ms-flex-align: stretch;
              -ms-grid-row-align: stretch;
          align-items: stretch; }

.column.align-stretch, .align-stretch.columns {
  -webkit-align-self: stretch;
      -ms-flex-item-align: stretch;
          align-self: stretch; }

/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
   * 1. Set default font family to sans-serif.
   * 2. Prevent iOS and IE text size adjust after device orientation change,
   *    without disabling user zoom.
   */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
   * Remove default margin.
   */
body {
  margin: 0; }

/* HTML5 display definitions
     ========================================================================== */
/**
   * Correct `block` display not defined for any HTML5 element in IE 8/9.
   * Correct `block` display not defined for `details` or `summary` in IE 10/11
   * and Firefox.
   * Correct `block` display not defined for `main` in IE 11.
   */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
   * 1. Correct `inline-block` display not defined in IE 8/9.
   * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
   */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
   * Prevent modern browsers from displaying `audio` without controls.
   * Remove excess height in iOS 5 devices.
   */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
   * Address `[hidden]` styling not present in IE 8/9/10.
   * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
   */
[hidden],
template {
  display: none; }

/* Links
     ========================================================================== */
/**
   * Remove the gray background color from active links in IE 10.
   */
a {
  background-color: transparent; }

/**
   * Improve readability of focused elements when they are also in an
   * active/hover state.
   */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
     ========================================================================== */
/**
   * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
   */
abbr[title] {
  border-bottom: 1px dotted; }

/**
   * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
   */
b,
strong {
  font-weight: bold; }

/**
   * Address styling not present in Safari and Chrome.
   */
dfn {
  font-style: italic; }

/**
   * Address variable `h1` font-size and margin within `section` and `article`
   * contexts in Firefox 4+, Safari, and Chrome.
   */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
   * Address styling not present in IE 8/9.
   */
mark {
  background: #ff0;
  color: #000; }

/**
   * Address inconsistent and variable font size in all browsers.
   */
small {
  font-size: 80%; }

/**
   * Prevent `sub` and `sup` affecting `line-height` in all browsers.
   */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
     ========================================================================== */
/**
   * Remove border when inside `a` element in IE 8/9/10.
   */
img {
  border: 0; }

/**
   * Correct overflow not hidden in IE 9/10/11.
   */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
     ========================================================================== */
/**
   * Address margin not present in IE 8/9 and Safari.
   */
figure {
  margin: 1em 40px; }

/**
   * Address differences between Firefox and other browsers.
   */
hr {
  box-sizing: content-box;
  height: 0; }

/**
   * Contain overflow in all browsers.
   */
pre {
  overflow: auto; }

/**
   * Address odd `em`-unit font size rendering in all browsers.
   */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
     ========================================================================== */
/**
   * Known limitation: by default, Chrome and Safari on OS X allow very limited
   * styling of `select`, unless a `border` property is set.
   */
/**
   * 1. Correct color not being inherited.
   *    Known issue: affects color of disabled elements.
   * 2. Correct font properties not being inherited.
   * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
   */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
   * Address `overflow` set to `hidden` in IE 8/9/10/11.
   */
button {
  overflow: visible; }

/**
   * Address inconsistent `text-transform` inheritance for `button` and `select`.
   * All other form control elements do not inherit `text-transform` values.
   * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
   * Correct `select` style inheritance in Firefox.
   */
button,
select {
  text-transform: none; }

/**
   * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
   *    and `video` controls.
   * 2. Correct inability to style clickable `input` types in iOS.
   * 3. Improve usability and consistency of cursor style between image-type
   *    `input` and others.
   */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
   * Re-set default cursor for disabled elements.
   */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
   * Remove inner padding and border in Firefox 4+.
   */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
   * Address Firefox 4+ setting `line-height` on `input` using `!important` in
   * the UA stylesheet.
   */
input {
  line-height: normal; }

/**
   * It's recommended that you don't attempt to style these elements.
   * Firefox's implementation doesn't respect box-sizing, padding, or width.
   *
   * 1. Address box sizing set to `content-box` in IE 8/9/10.
   * 2. Remove excess padding in IE 8/9/10.
   */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
   * Fix the cursor style for Chrome's increment/decrement buttons. For certain
   * `font-size` values of the `input`, it causes the cursor style of the
   * decrement button to change from `default` to `text`.
   */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
   * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
   * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
   */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
   * Remove inner padding and search cancel button in Safari and Chrome on OS X.
   * Safari (but not Chrome) clips the cancel button when the search input has
   * padding (and `textfield` appearance).
   */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
   * Define consistent border, margin, and padding.
   * [NOTE] We don't enable this ruleset in Foundation, because we want the <fieldset> element to have plain styling.
   */
/* fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
  } */
/**
   * 1. Correct `color` not being inherited in IE 8/9/10/11.
   * 2. Remove padding so people aren't caught out if they zero out fieldsets.
   */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
   * Remove default vertical scrollbar in IE 8/9/10/11.
   */
textarea {
  overflow: auto; }

/**
   * Don't inherit the `font-weight` (applied by a rule above).
   * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
   */
optgroup {
  font-weight: bold; }

/* Tables
     ========================================================================== */
/**
   * Remove most spacing between table cells.
   */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

.foundation-mq {
  font-family: "small=25em&medium=40em&large=64em&xlarge=75em&xxlarge=90em"; }

html {
  font-size: 100%;
  box-sizing: border-box; }

*,
*:before,
*:after {
  box-sizing: inherit; }

body {
  padding: 0;
  margin: 0;
  font-family: "Lora", "Times New Roman", serif;
  font-weight: 400;
  line-height: 1.2rem;
  color: #0b0b0b;
  background: transparent;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

img {
  max-width: 100%;
  height: auto;
  -ms-interpolation-mode: bicubic;
  display: inline-block;
  vertical-align: middle; }

textarea {
  height: auto;
  min-height: 50px;
  border-radius: 0.1rem; }

select {
  width: 100%;
  border-radius: 0.1rem; }

#map_canvas img,
#map_canvas embed,
#map_canvas object,
.map_canvas img,
.map_canvas embed,
.map_canvas object,
.mqa-display img,
.mqa-display embed,
.mqa-display object {
  max-width: none !important; }

button {
  -webkit-appearance: none;
  -moz-appearance: none;
  background: transparent;
  padding: 0;
  border: 0;
  border-radius: 0.1rem;
  line-height: 1; }

.is-visible {
  display: block !important; }

.is-hidden {
  display: none !important; }

body,
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
figure,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0; }

abbr[title],
dfn[title] {
  cursor: help; }

u,
ins {
  text-decoration: none; }

ins {
  border-bottom: 1px solid; }

fieldset {
  background-color: transparent;
  border: 0; }

html {
  background-image: url("http://basehold.it/i/29"); }

.srt {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px; }

.fullscreen {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
  min-height: 0; }
  @media screen and (min-width: 40em) {
    .fullscreen {
      min-height: 100vh; } }

.padding--full {
  padding: 1.8125rem; }

.margin--full {
  margin: 1.8125rem; }

.ng-binding {
  box-sizing: border-box; }

.fade-up {
  -webkit-transform: translateY(0);
      -ms-transform: translateY(0);
          transform: translateY(0);
  transition: opacity 1s ease, -webkit-transform 1s ease;
  transition: opacity 1s ease, transform 1s ease;
  transition: opacity 1s ease, transform 1s ease, -webkit-transform 1s ease;
  opacity: 1.0; }
  .fade-up.inactive,
  body.is-loading .fade-up {
    opacity: 0;
    -webkit-transform: translateY(1.8125rem);
        -ms-transform: translateY(1.8125rem);
            transform: translateY(1.8125rem); }

.wireframe section,
.wireframe footer,
.wireframe aside,
.wireframe main,
.wireframe nav,
.wireframe article,
.wireframe header,
.wireframe .wire-block {
  font: small sans-serif;
  margin: 0.90625rem;
  border: 1px solid gainsboro !important;
  background-color: whitesmoke !important; }
  .wireframe section section,
  .wireframe section footer,
  .wireframe section aside,
  .wireframe section main,
  .wireframe section nav,
  .wireframe section article,
  .wireframe section header,
  .wireframe section .wire-block,
  .wireframe footer section,
  .wireframe footer footer,
  .wireframe footer aside,
  .wireframe footer main,
  .wireframe footer nav,
  .wireframe footer article,
  .wireframe footer header,
  .wireframe footer .wire-block,
  .wireframe aside section,
  .wireframe aside footer,
  .wireframe aside aside,
  .wireframe aside main,
  .wireframe aside nav,
  .wireframe aside article,
  .wireframe aside header,
  .wireframe aside .wire-block,
  .wireframe main section,
  .wireframe main footer,
  .wireframe main aside,
  .wireframe main main,
  .wireframe main nav,
  .wireframe main article,
  .wireframe main header,
  .wireframe main .wire-block,
  .wireframe nav section,
  .wireframe nav footer,
  .wireframe nav aside,
  .wireframe nav main,
  .wireframe nav nav,
  .wireframe nav article,
  .wireframe nav header,
  .wireframe nav .wire-block,
  .wireframe article section,
  .wireframe article footer,
  .wireframe article aside,
  .wireframe article main,
  .wireframe article nav,
  .wireframe article article,
  .wireframe article header,
  .wireframe article .wire-block,
  .wireframe header section,
  .wireframe header footer,
  .wireframe header aside,
  .wireframe header main,
  .wireframe header nav,
  .wireframe header article,
  .wireframe header header,
  .wireframe header .wire-block,
  .wireframe .wire-block section,
  .wireframe .wire-block footer,
  .wireframe .wire-block aside,
  .wireframe .wire-block main,
  .wireframe .wire-block nav,
  .wireframe .wire-block article,
  .wireframe .wire-block header,
  .wireframe .wire-block .wire-block {
    background-color: rgba(232, 232, 232, 0.4) !important; }
  .wireframe section h1,
  .wireframe section h2,
  .wireframe section h3,
  .wireframe section h4,
  .wireframe footer h1,
  .wireframe footer h2,
  .wireframe footer h3,
  .wireframe footer h4,
  .wireframe aside h1,
  .wireframe aside h2,
  .wireframe aside h3,
  .wireframe aside h4,
  .wireframe main h1,
  .wireframe main h2,
  .wireframe main h3,
  .wireframe main h4,
  .wireframe nav h1,
  .wireframe nav h2,
  .wireframe nav h3,
  .wireframe nav h4,
  .wireframe article h1,
  .wireframe article h2,
  .wireframe article h3,
  .wireframe article h4,
  .wireframe header h1,
  .wireframe header h2,
  .wireframe header h3,
  .wireframe header h4,
  .wireframe .wire-block h1,
  .wireframe .wire-block h2,
  .wireframe .wire-block h3,
  .wireframe .wire-block h4 {
    font-weight: 100;
    margin: 0.90625rem;
    text-align: center;
    color: silver; }

input[type="email"],
input[type="number"],
input[type="password"],
input[type="search"],
input[type="tel"],
input[type="text"],
input[type="url"],
textarea,
select, label, ul, ol, dl, table, p,
.p, a,
strong,
em,
b,
i,
u,
del,
s,
sup,
sub,
small,
kbd,
q,
cite,
dfn,
mark,
code,
samp,
var {
  font-family: "Lora", "Times New Roman", serif;
  font-size: 1.2rem;
  font-weight: 400;
  line-height: 1.86rem; }

.content {
  position: relative; }

.btn,
button,
input[type="button"],
input[type="reset"],
input[type="submit"] {
  font-family: "Istok Web", "Helvetica Neu", Helvetica, Arial, sans-serif;
  font-size: 0.9rem;
  font-weight: 400;
  letter-spacing: 1px;
  line-height: 1.86rem;
  display: inline-block;
  padding: 0.45312rem 1.8125rem;
  cursor: pointer;
  text-align: center;
  white-space: nowrap;
  text-decoration: none;
  border-width: 0.1rem;
  border-style: solid;
  border-radius: 0.1rem;
  transition: background 0.2s ease-out, color 0.2s ease-out; }
  .btn:hover, .btn:focus,
  button:hover,
  button:focus,
  input[type="button"]:hover,
  input[type="button"]:focus,
  input[type="reset"]:hover,
  input[type="reset"]:focus,
  input[type="submit"]:hover,
  input[type="submit"]:focus {
    background-color: transparent; }
  .btn:disabled,
  button:disabled,
  input[type="button"]:disabled,
  input[type="reset"]:disabled,
  input[type="submit"]:disabled {
    cursor: not-allowed;
    color: #7e7e7e;
    border-color: #b1b1b1;
    background: #b1b1b1; }
    .btn:disabled:hover,
    button:disabled:hover,
    input[type="button"]:disabled:hover,
    input[type="reset"]:disabled:hover,
    input[type="submit"]:disabled:hover {
      color: #7e7e7e;
      border-color: #b1b1b1;
      background: #b1b1b1; }

.btn--success {
  color: #02110a;
  border-color: #0f9d58;
  background-color: #0f9d58; }
  .btn--success:hover, .btn--success:focus {
    color: #0f9d58; }

.btn--error {
  color: #531b16;
  border-color: #cb4437;
  background-color: #cb4437; }
  .btn--error:hover, .btn--error:focus {
    color: #cb4437; }

.btn--warning {
  color: #5b4300;
  border-color: #f4b400;
  background-color: #f4b400; }
  .btn--warning:hover, .btn--warning:focus {
    color: #f4b400; }

.btn--info {
  color: #521069;
  border-color: #b233df;
  background-color: #b233df; }
  .btn--info:hover, .btn--info:focus {
    color: #b233df; }

.btn--outline--success {
  color: #0f9d58;
  border-color: #0f9d58;
  background-color: transparent; }
  .btn--outline--success:hover, .btn--outline--success:focus {
    color: #02110a;
    background-color: #0f9d58; }

.btn--outline--error {
  color: #cb4437;
  border-color: #cb4437;
  background-color: transparent; }
  .btn--outline--error:hover, .btn--outline--error:focus {
    color: #531b16;
    background-color: #cb4437; }

.btn--outline--warning {
  color: #f4b400;
  border-color: #f4b400;
  background-color: transparent; }
  .btn--outline--warning:hover, .btn--outline--warning:focus {
    color: #5b4300;
    background-color: #f4b400; }

.btn--outline--info {
  color: #b233df;
  border-color: #b233df;
  background-color: transparent; }
  .btn--outline--info:hover, .btn--outline--info:focus {
    color: #521069;
    background-color: #b233df; }

.btn--text {
  color: #3372df;
  border: none;
  background: none; }
  .btn--text:hover, .btn--text:focus {
    color: #5f90e6; }

.btn--default {
  border-color: #3A506B;
  color: #ffffff; }
  .btn--default:hover, .btn--default:focus {
    background: #28374a; }

.btn--fit {
  display: block;
  width: 100%; }

input[type="email"],
input[type="number"],
input[type="password"],
input[type="search"],
input[type="tel"],
input[type="text"],
input[type="url"],
textarea,
select {
  width: 100%;
  padding: 0.90625rem;
  border: 0.1rem #b1b1b1 solid;
  border-radius: 0.1rem;
  background-color: transparent;
  box-shadow: none;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none; }
  input[type="email"]:focus,
  input[type="number"]:focus,
  input[type="password"]:focus,
  input[type="search"]:focus,
  input[type="tel"]:focus,
  input[type="text"]:focus,
  input[type="url"]:focus,
  textarea:focus,
  select:focus {
    border-color: #b1b1b1;
    outline: 0; }

.field-container {
  margin-top: 1.8125rem; }
  .field-container:first-child {
    margin-top: 0; }

a,
a:visited {
  font-family: "Istok Web", "Helvetica Neu", Helvetica, Arial, sans-serif;
  text-decoration: none;
  color: #3372df; }
  a:hover, a:focus,
  a:visited:hover,
  a:visited:focus {
    color: #174595; }

ul {
  margin-top: 0;
  padding-left: 0;
  list-style: circle inside; }
  ul li {
    margin-bottom: 0.90625rem; }
  ul ul,
  ul dl,
  ul ol {
    font-size: 90%;
    margin: 0.90625rem 0 0.90625rem 1.8125rem; }

ol {
  margin-top: 0;
  padding-left: 0;
  list-style: decimal inside; }
  ol li {
    margin-bottom: 0.90625rem; }
  ol ul,
  ol dl,
  ol ol {
    font-size: 90%;
    margin: 0.90625rem 0 0.90625rem 1.8125rem; }

dl {
  margin-top: 0;
  padding-left: 0; }
  dl dt,
  dl dd {
    margin-bottom: 0.90625rem; }
  dl dt {
    font-weight: 700; }
  dl dd {
    padding-left: 1.8125rem; }
  dl ul,
  dl dl,
  dl ol {
    font-size: 90%;
    margin: 0.90625rem 0 0.90625rem 1.8125rem; }

.list--horiz {
  margin: 0;
  padding: 0;
  list-style: none; }

.list--horiz__item {
  display: inline-block;
  margin-bottom: 0;
  margin-left: 0.90625rem; }
  .list--horiz__item:first-child {
    margin-left: 0; }

.logo__link {
  display: block;
  max-width: 5.4375rem;
  height: 100%;
  max-height: 5.4375rem;
  fill: #3372df;
  stroke: #3372df; }
  .logo__link > svg {
    max-width: 5.4375rem;
    max-height: 5.4375rem; }

table {
  width: 100%; }
  table th,
  table td {
    text-align: left;
    border-bottom: 0.1rem solid #b1b1b1;
    padding: 0.90625rem; }
    table th:first-child,
    table td:first-child {
      padding-left: 0; }
    table th:last-child,
    table td:last-child {
      padding-right: 0; }

h1,
h2,
h3,
h4,
h5 {
  font-family: "Istok Web", "Helvetica Neu", Helvetica, Arial, sans-serif;
  font-weight: 700;
  line-height: 2.79rem;
  margin-bottom: 0.90625rem; }

p,
.p {
  margin-bottom: 1.8125rem; }

blockquote {
  border-left: 0.1rem #b1b1b1 solid;
  padding: 0.90625rem 1.8125rem;
  background: #b1b1b1; }
  blockquote *:last-child {
    margin: 0; }

@media screen and (min-width: 40em) {
  .block-grid {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-direction: row;
        -ms-flex-direction: row;
            flex-direction: row;
    -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
            flex-wrap: wrap;
    margin: 0;
    padding: 0;
    list-style: none; }
  .block-grid__item {
    -webkit-flex: 1 0 50%;
        -ms-flex: 1 0 50%;
            flex: 1 0 50%; } }

@media screen and (min-width: 64em) {
  .block-grid__item {
    -webkit-flex: 1 0 30%;
        -ms-flex: 1 0 30%;
            flex: 1 0 30%; } }

.bg1 {
  background-color: #2B2D42; }

.bg2 {
  background-color: #3A506B; }

.bg3 {
  background-color: #818EA5; }

.bg4 {
  background-color: #EDF2F4; }

.bg5 {
  background-color: #5BC0BE; }

.bg6 {
  background-color: #6FFFE9; }

@media screen and (min-width: 75em) {
  .site-wrap {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    height: 100vh; }
  .main-content {
    -webkit-flex: 1 1 0;
        -ms-flex: 1 1 0;
            flex: 1 1 0;
    overflow-x: hidden;
    overflow-y: scroll; }
    .main-content .section__inner {
      max-width: 72.5rem; }
  .sidebar {
    -webkit-flex: 0 0 21.75rem;
        -ms-flex: 0 0 21.75rem;
            flex: 0 0 21.75rem;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
            flex-wrap: wrap; }
  .main-nav {
    -webkit-align-self: center;
        -ms-flex-item-align: center;
            align-self: center; }
  .main-nav {
    -webkit-flex: 0 0 calc(100% - (1.8125rem));
        -ms-flex: 0 0 calc(100% - (1.8125rem));
            flex: 0 0 calc(100% - (1.8125rem)); }
  .site-footer .section__inner {
    margin-right: auto;
    margin-left: auto; } }

@media screen and (min-width: 40em) {
  .section-who .section__inner {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex; }
  .section-who .bio {
    width: 50%; } }

/*# sourceMappingURL=data:application/json;base64, */
